// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package hostapd is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	SocketError
	ListSocketsRequest
	Socket
	SocketList
	PingRequest
	Pong
	PongResponse
	ListClientsRequest
	Client
	ListClientsResponse
*/
package hostapd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorCode int32

const (
	ErrorCode_OK                ErrorCode = 0
	ErrorCode_DEADLINE_EXCEEDED ErrorCode = 1
	ErrorCode_INTERNAL          ErrorCode = 2
)

var ErrorCode_name = map[int32]string{
	0: "OK",
	1: "DEADLINE_EXCEEDED",
	2: "INTERNAL",
}
var ErrorCode_value = map[string]int32{
	"OK":                0,
	"DEADLINE_EXCEEDED": 1,
	"INTERNAL":          2,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SocketError struct {
	Msg    string    `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	Code   ErrorCode `protobuf:"varint,2,opt,name=code,enum=hostapd.ErrorCode" json:"code,omitempty"`
	CErrno int32     `protobuf:"varint,3,opt,name=c_errno,json=cErrno" json:"c_errno,omitempty"`
}

func (m *SocketError) Reset()                    { *m = SocketError{} }
func (m *SocketError) String() string            { return proto.CompactTextString(m) }
func (*SocketError) ProtoMessage()               {}
func (*SocketError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SocketError) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SocketError) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_OK
}

func (m *SocketError) GetCErrno() int32 {
	if m != nil {
		return m.CErrno
	}
	return 0
}

type ListSocketsRequest struct {
}

func (m *ListSocketsRequest) Reset()                    { *m = ListSocketsRequest{} }
func (m *ListSocketsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSocketsRequest) ProtoMessage()               {}
func (*ListSocketsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Socket struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Socket) Reset()                    { *m = Socket{} }
func (m *Socket) String() string            { return proto.CompactTextString(m) }
func (*Socket) ProtoMessage()               {}
func (*Socket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Socket) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SocketList struct {
	Socket []*Socket `protobuf:"bytes,1,rep,name=socket" json:"socket,omitempty"`
}

func (m *SocketList) Reset()                    { *m = SocketList{} }
func (m *SocketList) String() string            { return proto.CompactTextString(m) }
func (*SocketList) ProtoMessage()               {}
func (*SocketList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SocketList) GetSocket() []*Socket {
	if m != nil {
		return m.Socket
	}
	return nil
}

type PingRequest struct {
	// no socket name pings all sockets
	SocketName []string `protobuf:"bytes,1,rep,name=socket_name,json=socketName" json:"socket_name,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PingRequest) GetSocketName() []string {
	if m != nil {
		return m.SocketName
	}
	return nil
}

type Pong struct {
	SocketName string       `protobuf:"bytes,1,opt,name=socket_name,json=socketName" json:"socket_name,omitempty"`
	Error      *SocketError `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Pong) GetSocketName() string {
	if m != nil {
		return m.SocketName
	}
	return ""
}

func (m *Pong) GetError() *SocketError {
	if m != nil {
		return m.Error
	}
	return nil
}

type PongResponse struct {
	Pong []*Pong `protobuf:"bytes,1,rep,name=pong" json:"pong,omitempty"`
}

func (m *PongResponse) Reset()                    { *m = PongResponse{} }
func (m *PongResponse) String() string            { return proto.CompactTextString(m) }
func (*PongResponse) ProtoMessage()               {}
func (*PongResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PongResponse) GetPong() []*Pong {
	if m != nil {
		return m.Pong
	}
	return nil
}

type ListClientsRequest struct {
	SocketName []string `protobuf:"bytes,1,rep,name=socket_name,json=socketName" json:"socket_name,omitempty"`
}

func (m *ListClientsRequest) Reset()                    { *m = ListClientsRequest{} }
func (m *ListClientsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListClientsRequest) ProtoMessage()               {}
func (*ListClientsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListClientsRequest) GetSocketName() []string {
	if m != nil {
		return m.SocketName
	}
	return nil
}

type Client struct {
	Addr          string   `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Flag          []string `protobuf:"bytes,2,rep,name=flag" json:"flag,omitempty"`
	ConnectedTime uint32   `protobuf:"varint,3,opt,name=connected_time,json=connectedTime" json:"connected_time,omitempty"`
	IdleMsec      uint32   `protobuf:"varint,4,opt,name=idle_msec,json=idleMsec" json:"idle_msec,omitempty"`
	RxPackets     uint32   `protobuf:"varint,5,opt,name=rx_packets,json=rxPackets" json:"rx_packets,omitempty"`
	TxPackets     uint32   `protobuf:"varint,6,opt,name=tx_packets,json=txPackets" json:"tx_packets,omitempty"`
	RxBytes       uint32   `protobuf:"varint,7,opt,name=rx_bytes,json=rxBytes" json:"rx_bytes,omitempty"`
	TxBytes       uint32   `protobuf:"varint,8,opt,name=tx_bytes,json=txBytes" json:"tx_bytes,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Client) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Client) GetFlag() []string {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *Client) GetConnectedTime() uint32 {
	if m != nil {
		return m.ConnectedTime
	}
	return 0
}

func (m *Client) GetIdleMsec() uint32 {
	if m != nil {
		return m.IdleMsec
	}
	return 0
}

func (m *Client) GetRxPackets() uint32 {
	if m != nil {
		return m.RxPackets
	}
	return 0
}

func (m *Client) GetTxPackets() uint32 {
	if m != nil {
		return m.TxPackets
	}
	return 0
}

func (m *Client) GetRxBytes() uint32 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *Client) GetTxBytes() uint32 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

type ListClientsResponse struct {
	Client []*Client      `protobuf:"bytes,1,rep,name=client" json:"client,omitempty"`
	Error  []*SocketError `protobuf:"bytes,2,rep,name=error" json:"error,omitempty"`
}

func (m *ListClientsResponse) Reset()                    { *m = ListClientsResponse{} }
func (m *ListClientsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListClientsResponse) ProtoMessage()               {}
func (*ListClientsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListClientsResponse) GetClient() []*Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *ListClientsResponse) GetError() []*SocketError {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*SocketError)(nil), "hostapd.SocketError")
	proto.RegisterType((*ListSocketsRequest)(nil), "hostapd.ListSocketsRequest")
	proto.RegisterType((*Socket)(nil), "hostapd.Socket")
	proto.RegisterType((*SocketList)(nil), "hostapd.SocketList")
	proto.RegisterType((*PingRequest)(nil), "hostapd.PingRequest")
	proto.RegisterType((*Pong)(nil), "hostapd.Pong")
	proto.RegisterType((*PongResponse)(nil), "hostapd.PongResponse")
	proto.RegisterType((*ListClientsRequest)(nil), "hostapd.ListClientsRequest")
	proto.RegisterType((*Client)(nil), "hostapd.Client")
	proto.RegisterType((*ListClientsResponse)(nil), "hostapd.ListClientsResponse")
	proto.RegisterEnum("hostapd.ErrorCode", ErrorCode_name, ErrorCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HostapdControl service

type HostapdControlClient interface {
	ListSockets(ctx context.Context, in *ListSocketsRequest, opts ...grpc.CallOption) (*SocketList, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error)
	ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error)
}

type hostapdControlClient struct {
	cc *grpc.ClientConn
}

func NewHostapdControlClient(cc *grpc.ClientConn) HostapdControlClient {
	return &hostapdControlClient{cc}
}

func (c *hostapdControlClient) ListSockets(ctx context.Context, in *ListSocketsRequest, opts ...grpc.CallOption) (*SocketList, error) {
	out := new(SocketList)
	err := grpc.Invoke(ctx, "/hostapd.HostapdControl/ListSockets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostapdControlClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := grpc.Invoke(ctx, "/hostapd.HostapdControl/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostapdControlClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	out := new(ListClientsResponse)
	err := grpc.Invoke(ctx, "/hostapd.HostapdControl/ListClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HostapdControl service

type HostapdControlServer interface {
	ListSockets(context.Context, *ListSocketsRequest) (*SocketList, error)
	Ping(context.Context, *PingRequest) (*PongResponse, error)
	ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error)
}

func RegisterHostapdControlServer(s *grpc.Server, srv HostapdControlServer) {
	s.RegisterService(&_HostapdControl_serviceDesc, srv)
}

func _HostapdControl_ListSockets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSocketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostapdControlServer).ListSockets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostapd.HostapdControl/ListSockets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostapdControlServer).ListSockets(ctx, req.(*ListSocketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostapdControl_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostapdControlServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostapd.HostapdControl/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostapdControlServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostapdControl_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostapdControlServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostapd.HostapdControl/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostapdControlServer).ListClients(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostapdControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hostapd.HostapdControl",
	HandlerType: (*HostapdControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSockets",
			Handler:    _HostapdControl_ListSockets_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _HostapdControl_Ping_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _HostapdControl_ListClients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x5f, 0x8f, 0xd2, 0x4c,
	0x14, 0xc6, 0xb7, 0x50, 0x0a, 0x3d, 0x5d, 0x78, 0x79, 0xcf, 0xee, 0xc6, 0xca, 0xae, 0x11, 0x9b,
	0xe8, 0x92, 0xbd, 0x20, 0x11, 0x43, 0xe2, 0x2d, 0x42, 0x13, 0x57, 0x11, 0x49, 0x77, 0x2f, 0xbc,
	0xab, 0xdd, 0x76, 0xc4, 0x2a, 0x74, 0xea, 0xcc, 0x98, 0xe0, 0x17, 0xf5, 0x33, 0xf8, 0x31, 0xcc,
	0xcc, 0x94, 0x2e, 0x7f, 0x4c, 0xf6, 0x6e, 0xe6, 0xfc, 0x9e, 0x33, 0xe7, 0xf0, 0x9c, 0x43, 0xc1,
	0x8e, 0xf2, 0xb4, 0x9f, 0x33, 0x2a, 0x28, 0xd6, 0xbf, 0x52, 0x2e, 0xa2, 0x3c, 0xf1, 0x3e, 0x83,
	0x73, 0x43, 0xe3, 0xef, 0x44, 0xf8, 0x8c, 0x51, 0x86, 0x6d, 0xa8, 0xae, 0xf8, 0xc2, 0x35, 0xba,
	0x46, 0xcf, 0x0e, 0xe4, 0x11, 0x5f, 0x80, 0x19, 0xd3, 0x84, 0xb8, 0x95, 0xae, 0xd1, 0x6b, 0x0d,
	0xb0, 0x5f, 0x24, 0xf6, 0x95, 0x7e, 0x4c, 0x13, 0x12, 0x28, 0x8e, 0x8f, 0xa0, 0x1e, 0x87, 0x84,
	0xb1, 0x8c, 0xba, 0xd5, 0xae, 0xd1, 0xab, 0x05, 0x56, 0xec, 0xcb, 0x9b, 0x77, 0x0a, 0x38, 0x4d,
	0xb9, 0xd0, 0x55, 0x78, 0x40, 0x7e, 0xfc, 0x24, 0x5c, 0x78, 0x17, 0x60, 0xe9, 0x08, 0x22, 0x98,
	0x59, 0xb4, 0x22, 0x45, 0x4d, 0x75, 0xf6, 0x86, 0x00, 0x9a, 0xca, 0x4c, 0xbc, 0x04, 0x8b, 0xab,
	0x9b, 0x6b, 0x74, 0xab, 0x3d, 0x67, 0xf0, 0x5f, 0xd9, 0x84, 0x16, 0x05, 0x05, 0xf6, 0xfa, 0xe0,
	0xcc, 0xd3, 0x6c, 0x51, 0xd4, 0xc0, 0xa7, 0xe0, 0x68, 0x10, 0x16, 0x05, 0xaa, 0x3d, 0x3b, 0x00,
	0x1d, 0x9a, 0xc9, 0x32, 0x37, 0x60, 0xce, 0x69, 0xb6, 0x38, 0x14, 0x1a, 0xbb, 0x42, 0xbc, 0x82,
	0x1a, 0x91, 0xbf, 0x57, 0xb9, 0xe0, 0x0c, 0x4e, 0xf7, 0x1a, 0x50, 0x5e, 0x04, 0x5a, 0xe2, 0xbd,
	0x84, 0x63, 0xf9, 0x68, 0x40, 0x78, 0x4e, 0x33, 0x4e, 0xf0, 0x19, 0x98, 0x39, 0xcd, 0x16, 0x45,
	0xef, 0xcd, 0x32, 0x55, 0x89, 0x14, 0xf2, 0x86, 0xda, 0xa2, 0xf1, 0x32, 0x25, 0x59, 0x69, 0xd1,
	0xc3, 0xed, 0xff, 0x31, 0xc0, 0xd2, 0x39, 0xd2, 0xc4, 0x28, 0x49, 0xd8, 0xc6, 0x44, 0x79, 0x96,
	0xb1, 0x2f, 0xcb, 0x68, 0xe1, 0x56, 0x54, 0xa2, 0x3a, 0xe3, 0x73, 0x68, 0xc5, 0x34, 0xcb, 0x48,
	0x2c, 0x48, 0x12, 0x8a, 0x74, 0x45, 0xd4, 0xb0, 0x9a, 0x41, 0xb3, 0x8c, 0xde, 0xa6, 0x2b, 0x82,
	0xe7, 0x60, 0xa7, 0xc9, 0x92, 0x84, 0x2b, 0x4e, 0x62, 0xd7, 0x54, 0x8a, 0x86, 0x0c, 0x7c, 0xe0,
	0x24, 0xc6, 0x27, 0x00, 0x6c, 0x1d, 0xe6, 0x91, 0x9a, 0xa7, 0x5b, 0x53, 0xd4, 0x66, 0xeb, 0xb9,
	0x0e, 0x48, 0x2c, 0xee, 0xb1, 0xa5, 0xb1, 0x28, 0xf1, 0x63, 0x68, 0xb0, 0x75, 0x78, 0xf7, 0x4b,
	0x10, 0xee, 0xd6, 0x15, 0xac, 0xb3, 0xf5, 0x1b, 0x79, 0x95, 0x48, 0x6c, 0x50, 0x43, 0x23, 0xa1,
	0x91, 0xf7, 0x0d, 0x4e, 0x76, 0x1c, 0x2a, 0xbc, 0xbd, 0x04, 0x2b, 0x56, 0xa1, 0x83, 0xcd, 0xd0,
	0xca, 0xa0, 0xc0, 0xdb, 0x03, 0xac, 0x3e, 0x30, 0xc0, 0xab, 0xd7, 0x60, 0x97, 0xcb, 0x8d, 0x16,
	0x54, 0x3e, 0xbe, 0x6f, 0x1f, 0xe1, 0x19, 0xfc, 0x3f, 0xf1, 0x47, 0x93, 0xe9, 0xf5, 0xcc, 0x0f,
	0xfd, 0x4f, 0x63, 0xdf, 0x9f, 0xf8, 0x93, 0xb6, 0x81, 0xc7, 0xd0, 0xb8, 0x9e, 0xdd, 0xfa, 0xc1,
	0x6c, 0x34, 0x6d, 0x57, 0x06, 0xbf, 0x0d, 0x68, 0xbd, 0xd5, 0x0f, 0x8f, 0x69, 0x26, 0x18, 0x5d,
	0xe2, 0x08, 0x9c, 0xad, 0xed, 0xc7, 0xf3, 0xb2, 0xf0, 0xe1, 0x7f, 0xa2, 0x73, 0xb2, 0xd7, 0x95,
	0x94, 0x78, 0x47, 0x38, 0x04, 0x53, 0x6e, 0x35, 0xde, 0x37, 0xbd, 0xb5, 0xe4, 0x9d, 0xb3, 0xdd,
	0x85, 0x2a, 0x9c, 0xf1, 0x8e, 0xf0, 0x9d, 0xae, 0x5c, 0x58, 0xb6, 0x57, 0x79, 0x77, 0xd5, 0x3a,
	0x17, 0xff, 0x86, 0x9b, 0xb7, 0xee, 0x2c, 0xf5, 0xd5, 0x78, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x0b, 0xcf, 0x49, 0x72, 0x42, 0x04, 0x00, 0x00,
}
